<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码学习 on BinGo&#39;s Blog</title>
    <link>https://aka-bingo.github.io/tags/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 源码学习 on BinGo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Sep 2019 20:49:19 +0800</lastBuildDate>
    
	<atom:link href="https://aka-bingo.github.io/tags/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Channel 学习笔记</title>
      <link>https://aka-bingo.github.io/2019/09/golang-channel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 03 Sep 2019 20:49:19 +0800</pubDate>
      
      <guid>https://aka-bingo.github.io/2019/09/golang-channel-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>简介 Channel 是 Go 语言中并发模型的重要组成部分，可以在不同的 goroutine 之间进行数据的传输。
在日常使用中，channel 可以分为两种：
 无缓冲 channel：在无缓冲 channel 中，数据的发送和读取操作需要同时进行，当只有一个 goroutine A 进行数据的读取（写入）时，需要等待另一个 goroutine B 通过这个 channel 进行数据写入（读取）。在此之前 goroutine A 会一直阻塞，直到 goroutine B来拯救它。 有缓冲 channel：在有缓冲 channel 中，会自带一个缓冲循环队列。当 goroutine 进行数据读取时，如果缓冲队列中有数据便直接读取，如果没有便阻塞等待其他 goroutine 写入数据。当 goroutine 进行数据写入时，如果缓冲队列没有满，则直接写入数据后离开。如果缓冲队列已满，则需要等待其他 goroutine 来消费缓冲队列，才能继续写入，在此之前只能一直阻塞。  Channel 数据结构 首先，我们看一下 Go 语言中 Channel 的数据结构：
# go1.13:src/runtime/chan.go:32 type hchan struct { qcount uint // 当前channel中元素的个数 	dataqsiz uint // 循环队列的长度 	buf unsafe.Pointer // 指针, 指向一个长度为dataqsize的数组, 即缓冲队列 	elemsize uint16 // channel可以接收的元素大小(单个) 	closed uint32	// channel的关闭状态 	elemtype *_type // channel可以接收的元素类型 	sendx uint // 标示当前可发送元素的位置(数组下标) 	recvx uint // 标示当前可接收元素的位置(数组下标) 	recvq waitq // 阻塞的接收 goroutine 队列 	sendq waitq // 阻塞的发送 goroutine 队列  // lock protects all fields in hchan, as well as several 	// fields in sudogs blocked on this channel.</description>
    </item>
    
  </channel>
</rss>